{"version":3,"file":"static/js/493.7f2509f7.chunk.js","mappings":"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","sources":["components/Cast/Cast.Styled.js","components/Cast/Cast.jsx","services/MoviesAPI.js","utils/getImgPath.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 80px;\n  margin-top: 20px;\n  margin-bottom: 30px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc((100% - 10px) / 5);\n  border: 1px solid green;\n  border-radius: 8px;\n\n  overflow: hidden;\n\n  box-shadow: 9px 7px 19px 7px rgba(42, 79, 42, 0.57);\n  -webkit-box-shadow: 9px 7px 19px 7px rgba(42, 79, 42, 0.57);\n  -moz-box-shadow: 9px 7px 19px 7px rgba(42, 79, 42, 0.57);\n  transform: scale(1);\n  transition: transform 200ms linear;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Div = styled.div`\n  height: 100%;\n`;\nexport const ImgWrap = styled.div`\n  position: relative;\n  overflow: hidden;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  min-height: 345px;\n`;\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n  text-align: center;\n  flex-grow: 1;\n`;\nexport const Name = styled.p`\n  padding: 8px 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\nexport const Character = styled.p`\n  padding: 8px 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { LineWave } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from 'services/MoviesAPI';\nimport { getImgPath } from 'utils';\nimport NoImg from '../../img/NoImg.png';\nimport {\n  List,\n  Item,\n  Img,\n  Wrap,\n  Name,\n  Character,\n  ImgWrap,\n  Div,\n} from './Cast.Styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setError(false);\n    setIsloading(true);\n    setActors(null);\n\n    const abortController = new AbortController();\n\n    const fetchActors = async () => {\n      try {\n        const actors = await getActors(movieId, abortController.signal);\n\n        if (actors.cast.length === 0) {\n          setError(true);\n          return await Promise.reject(new Error(`\" Not found \"`));\n        }\n        setActors(actors.cast);\n      } catch {\n      } finally {\n        setIsloading(false);\n      }\n    };\n    fetchActors();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <LineWave\n          height=\"100\"\n          width=\"100\"\n          color=\"#4fa94d\"\n          ariaLabel=\"line-wave\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n          firstLineColor=\"\"\n          middleLineColor=\"\"\n          lastLineColor=\"\"\n        />\n      )}\n      <List>\n        {error && !isLoading && (\n          <li>\n            <span style={{ color: 'red' }}>Actor info not found</span>\n          </li>\n        )}\n        {actors &&\n          !isLoading &&\n          actors.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <Div>\n                <ImgWrap>\n                  <Img\n                    src={profile_path ? getImgPath(profile_path) : NoImg}\n                    alt={name}\n                  />\n                </ImgWrap>\n                <Wrap>\n                  <Name>{name}</Name>\n                  <Character>{`Character ${character}`}</Character>\n                </Wrap>\n              </Div>\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = '6b1b36ecf2f3f3c0d27307e18cbffcb3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMovieList = async signal => {\n  try {\n    const resp = await axios.get('trending/movie/day', {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch {}\n};\n\nexport const getMovie = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch {}\n};\n\nexport const getActors = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}/credits`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch {}\n};\n\nexport const getReviews = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}/reviews`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch {}\n};\n\nexport const getMovies = async (query, signal) => {\n  try {\n    const resp = await axios.get(\n      `\n/search/movie`,\n\n      {\n        signal,\n        params: {\n          api_key: API_KEY,\n          query,\n        },\n      }\n    );\n\n    return resp.data;\n  } catch {}\n};\n","export const getImgPath = path => {\n  const BASE_PATH = 'https://image.tmdb.org/t/p/w500/';\n  return BASE_PATH + path;\n};\n"],"names":["List","styled","Item","Div","ImgWrap","Img","Wrap","Name","Character","useState","actors","setActors","error","setError","isLoading","setIsloading","movieId","useParams","useEffect","abortController","AbortController","fetchActors","getActors","signal","cast","length","Promise","reject","Error","abort","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","firstLineColor","middleLineColor","lastLineColor","style","map","id","name","character","profile_path","src","getImgPath","NoImg","alt","API_KEY","axios","getMovieList","params","api_key","resp","data","getMovie","getReviews","getMovies","query","path"],"sourceRoot":""}