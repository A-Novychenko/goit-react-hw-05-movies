{"version":3,"file":"static/js/982.1e11ec60.chunk.js","mappings":"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","sources":["utils/formatDate.js","utils/getUserScore.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","utils/getGenres.js","pages/MoviePage.jsx","services/MoviesAPI.js","utils/getImgPath.js"],"sourcesContent":["export function getYear(date) {\n  if (!date) {\n    return null;\n  }\n  const dateRelease = new Date(date);\n  return ` (${dateRelease.getFullYear()})`;\n}\n","export const getUserScore = score => {\n  return Math.round(score * 10).toString();\n  //   return (score * 10).toString();\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  padding-bottom: 24px;\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid green;\n`;\nexport const Img = styled.img`\n  width: 320px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 32px;\n  margin-bottom: 32px;\n`;\n\nexport const Score = styled.p`\n  margin-bottom: 32px;\n  color: green;\n`;\n\nexport const SubTitle = styled.h3`\n  font-size: 24px;\n  margin-bottom: 16px;\n`;\nexport const Inner = styled.div`\n  font-size: 20px;\n  line-height: 1.3;\n  margin-bottom: 24px;\n`;\nexport const Btns = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 24px;\n  padding-bottom: 24px;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  border-bottom: 1px solid green;\n`;\n\nexport const NavLinkStyled = styled(NavLink)`\n  display: inline-block;\n  min-width: 80px;\n  padding: 8px;\n  background-color: #fff;\n\n  text-align: center;\n\n  font-size: 20px;\n  text-decoration: none;\n  color: green;\n  border-radius: 4px;\n\n  :hover {\n    color: white;\n    background-color: green;\n  }\n  &.active {\n    color: white;\n    background-color: green;\n    box-shadow: 0px -1px 13px 7px rgba(255, 255, 255, 0.54);\n    -webkit-box-shadow: 0px -1px 13px 7px rgba(255, 255, 255, 0.54);\n    -moz-box-shadow: 0px -1px 13px 7px rgba(255, 255, 255, 0.54);\n  }\n`;\n\nexport const SubTitleCenter = styled.div`\n  text-align: center;\n`;\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { getGenres, getUserScore, getImgPath, getYear } from 'utils';\nimport {\n  Section,\n  Title,\n  Wrapper,\n  Score,\n  SubTitle,\n  Inner,\n  Img,\n  NavLinkStyled,\n  Btns,\n  SubTitleCenter,\n} from './MovieDetails.styled';\nimport NoImg from '../../img/NoImg.png';\nimport { LineWave } from 'react-loader-spinner';\n\nexport const MovieDetails = ({\n  movie: { poster_path, title, release_date, vote_average, overview, genres },\n}) => {\n  return (\n    <>\n      <Section>\n        <Wrapper>\n          <Img\n            // src={getImgPath(movie.poster_path)}\n            src={poster_path ? getImgPath(poster_path) : NoImg}\n            alt={title}\n          />\n\n          <div>\n            <Title>{`${title}${\n              release_date ? getYear(release_date) : ''\n            }`}</Title>\n            <Score>{`User score: ${getUserScore(vote_average)}%`}</Score>\n            {overview && (\n              <Inner>\n                <SubTitle>Overview</SubTitle>\n                <p>{overview}</p>\n              </Inner>\n            )}\n            {genres.length !== 0 && (\n              <Inner>\n                <SubTitle>Genres</SubTitle>\n                <p>{getGenres(genres)}</p>\n              </Inner>\n            )}\n          </div>\n        </Wrapper>\n      </Section>\n      <Section>\n        <SubTitleCenter>\n          <SubTitle>Addtional information</SubTitle>\n        </SubTitleCenter>\n        <Btns>\n          <NavLinkStyled to=\"cast\">Cast</NavLinkStyled>\n          <NavLinkStyled to=\"reviews\">Reviews</NavLinkStyled>\n        </Btns>\n        <Suspense\n          fallback={\n            <LineWave\n              height=\"100\"\n              width=\"100\"\n              color=\"#4fa94d\"\n              ariaLabel=\"line-wave\"\n              wrapperStyle={{}}\n              wrapperClass=\"\"\n              visible={true}\n              firstLineColor=\"\"\n              middleLineColor=\"\"\n              lastLineColor=\"\"\n            />\n          }\n        >\n          <Outlet />\n        </Suspense>\n      </Section>\n    </>\n  );\n};\n","export const getGenres = genresObjs => {\n  const genresArr = genresObjs.map(el => el.name);\n  return genresArr.join(' ');\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\nimport { TbArrowBackUp } from 'react-icons/tb';\nimport { MovieDetails } from 'components/MovieDetails';\nimport { getMovie } from 'services/MoviesAPI';\nimport { Circles } from 'react-loader-spinner';\n\nconst MoviePage = () => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    setError(false);\n    setIsloading(true);\n    const fetchMovie = async () => {\n      try {\n        const movieItem = await getMovie(movieId);\n        if (!movieItem) {\n          return await Promise.reject(new Error(`\" Not found \"`));\n        }\n        setMovie(movieItem);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsloading(false);\n      }\n    };\n    fetchMovie();\n    return () => {\n      'abort';\n      //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <Circles\n          height=\"300\"\n          width=\"300\"\n          color=\"#4fa94d\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{\n            display: 'flex',\n            justifyContent: 'center',\n            position: 'fixed',\n            top: '150px',\n            left: '50%',\n            transform: 'translate(-50%)',\n          }}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {error && !isLoading && (\n        <h2 style={{ color: 'red', fontSize: 20 }}>\n          Oops, mistake! Please try again\n        </h2>\n      )}\n      <Link to={backLink.current}>\n        <TbArrowBackUp size={40} color={'green'} />\n      </Link>\n      {movie && !error && !isLoading && <MovieDetails movie={movie} />}\n    </>\n  );\n};\nexport default MoviePage;\n","import axios from 'axios';\nconst API_KEY = '6b1b36ecf2f3f3c0d27307e18cbffcb3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMovieList = async signal => {\n  try {\n    const resp = await axios.get('trending/movie/day', {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovie = async id => {\n  try {\n    const resp = await axios.get(`movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getActors = async id => {\n  try {\n    const resp = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const resp = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovies = async query => {\n  try {\n    const resp = await axios.get(\n      `\n/search/movie`,\n      {\n        params: {\n          api_key: API_KEY,\n          query,\n        },\n      }\n    );\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export const getImgPath = path => {\n  const BASE_PATH = 'https://image.tmdb.org/t/p/w500/';\n  return BASE_PATH + path;\n};\n"],"names":["getYear","date","dateRelease","Date","getFullYear","Section","styled","Wrapper","Img","Title","Score","SubTitle","Inner","Btns","NavLinkStyled","NavLink","SubTitleCenter","MovieDetails","genresObjs","score","movie","poster_path","title","release_date","vote_average","overview","genres","src","getImgPath","NoImg","alt","Math","round","toString","length","map","el","name","join","to","Suspense","fallback","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","firstLineColor","middleLineColor","lastLineColor","useState","setMovie","error","setError","isLoading","setIsloading","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","fetchMovie","getMovie","movieItem","Promise","reject","Error","display","justifyContent","position","top","left","transform","style","fontSize","current","size","API_KEY","axios","getMovieList","signal","params","api_key","resp","data","console","log","id","getActors","getReviews","getMovies","query","path"],"sourceRoot":""}