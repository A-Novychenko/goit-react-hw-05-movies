{"version":3,"file":"static/js/607.843788ba.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/MoviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-left: 32px;\n  padding-right: 32px;\n`;\nexport const Item = styled.li`\n  margin-bottom: 24px;\n`;\nexport const Title = styled.h3`\n  margin-bottom: 16px;\n  font-size: 20px;\n`;\nexport const Descr = styled.p`\n  line-height: 1.2;\n`;\nexport const NotFound = styled.p`\n  color: red;\n`;\n","import { useEffect, useState } from 'react';\nimport { LineWave } from 'react-loader-spinner';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/MoviesAPI';\nimport { List, Item, Title, Descr, NotFound } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setError(false);\n    setIsloading(true);\n\n    const abortController = new AbortController();\n\n    const fetchReviews = async () => {\n      try {\n        const reviews = await getReviews(movieId, abortController.signal);\n\n        if (reviews.results.length === 0) {\n          setError(true);\n          return await Promise.reject(new Error(`\" Not found \"`));\n        }\n        setReviews(reviews.results);\n      } catch {\n      } finally {\n        setIsloading(false);\n      }\n    };\n    fetchReviews();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <LineWave\n          height=\"100\"\n          width=\"100\"\n          color=\"#4fa94d\"\n          ariaLabel=\"line-wave\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n          firstLineColor=\"\"\n          middleLineColor=\"\"\n          lastLineColor=\"\"\n        />\n      )}\n      <List>\n        {error && (\n          <Item key={'notFound'}>\n            <NotFound>There is no information about this film.</NotFound>\n          </Item>\n        )}\n        {reviews &&\n          reviews.length !== 0 &&\n          reviews.map(({ content, author_details: { username } }, index) => (\n            <Item key={index}>\n              <Title>{`Author ${username}`}</Title>\n              <Descr>{content}</Descr>\n            </Item>\n          ))}\n      </List>\n    </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = '6b1b36ecf2f3f3c0d27307e18cbffcb3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMovieList = async signal => {\n  try {\n    const resp = await axios.get('trending/movie/day', {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovie = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getActors = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}/credits`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async (id, signal) => {\n  try {\n    const resp = await axios.get(`movie/${id}/reviews`, {\n      signal,\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovies = async (query, signal) => {\n  try {\n    const resp = await axios.get(\n      `\n/search/movie`,\n\n      {\n        signal,\n        params: {\n          api_key: API_KEY,\n          query,\n        },\n      }\n    );\n\n    return resp.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["List","styled","Item","Title","Descr","NotFound","useState","reviews","setReviews","error","setError","isLoading","setIsloading","movieId","useParams","useEffect","abortController","AbortController","fetchReviews","getReviews","signal","results","length","Promise","reject","Error","abort","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","firstLineColor","middleLineColor","lastLineColor","map","index","content","username","author_details","API_KEY","axios","getMovieList","params","api_key","resp","data","console","log","getMovie","id","getActors","getMovies","query"],"sourceRoot":""}